{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cloudscale.ch CLI The official cloudscale.ch command line interface (CLI) client. Install pipx install cloudscale-cli cloudscale --version Usage cloudscale --help Usage: cloudscale [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. -a, --api-token TEXT API token. -p, --profile TEXT Profile used in config file. --debug Enables debug log output. -o, --output [table|json] Output format. [default: table] -h, --help Show this message and exit. Commands: flavor floating-ip image network objects-user region server server-group subnet volume","title":"Home"},{"location":"#cloudscalech-cli","text":"The official cloudscale.ch command line interface (CLI) client.","title":"cloudscale.ch CLI"},{"location":"#install","text":"pipx install cloudscale-cli cloudscale --version","title":"Install"},{"location":"#usage","text":"cloudscale --help Usage: cloudscale [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. -a, --api-token TEXT API token. -p, --profile TEXT Profile used in config file. --debug Enables debug log output. -o, --output [table|json] Output format. [default: table] -h, --help Show this message and exit. Commands: flavor floating-ip image network objects-user region server server-group subnet volume","title":"Usage"},{"location":"auth/","text":"Authentication Config File with Profiles Creating an ini file .cloudscale.ini (leading dot) in your $HOME or a cloudscale.ini (without leading dot) in the CWD with the following schema: [default] api_token = <token> The default profile taken if available is default . The profile can be chosen by passing --profile or CLOUDSCALE_PROFILE ENV variable. export CLOUDSCALE_PROFILE = staging [production] api_token = <token> [staging] api_token = <token> Passing the command line option will overwrite the ENV var as one would expect: cloudscale --profile production server list Command Line Argument Passing the --api-token parameter: cloudscale --api-token <your_token> server create ... By Evironment Variable Using the ENV CLOUDSCALE_API_TOKEN variable: export CLOUDSCALE_API_TOKEN = <your token> cloudscale flavor list","title":"Authentication"},{"location":"auth/#authentication","text":"","title":"Authentication"},{"location":"auth/#config-file-with-profiles","text":"Creating an ini file .cloudscale.ini (leading dot) in your $HOME or a cloudscale.ini (without leading dot) in the CWD with the following schema: [default] api_token = <token> The default profile taken if available is default . The profile can be chosen by passing --profile or CLOUDSCALE_PROFILE ENV variable. export CLOUDSCALE_PROFILE = staging [production] api_token = <token> [staging] api_token = <token> Passing the command line option will overwrite the ENV var as one would expect: cloudscale --profile production server list","title":"Config File with Profiles"},{"location":"auth/#command-line-argument","text":"Passing the --api-token parameter: cloudscale --api-token <your_token> server create ...","title":"Command Line Argument"},{"location":"auth/#by-evironment-variable","text":"Using the ENV CLOUDSCALE_API_TOKEN variable: export CLOUDSCALE_API_TOKEN = <your token> cloudscale flavor list","title":"By Evironment Variable"},{"location":"autocompletion/","text":"Autocompletion zsh For Zsh, add this to ~/.zshrc : eval \" $( _CLOUDSCALE_COMPLETE = source_zsh cloudscale ) \" bash For Bash, add this to ~/.bashrc : eval \" $( _CLOUDSCALE_COMPLETE = source cloudscale ) \"","title":"Autocompletion"},{"location":"autocompletion/#autocompletion","text":"","title":"Autocompletion"},{"location":"autocompletion/#zsh","text":"For Zsh, add this to ~/.zshrc : eval \" $( _CLOUDSCALE_COMPLETE = source_zsh cloudscale ) \"","title":"zsh"},{"location":"autocompletion/#bash","text":"For Bash, add this to ~/.bashrc : eval \" $( _CLOUDSCALE_COMPLETE = source cloudscale ) \"","title":"bash"},{"location":"debug/","text":"Verbosity and Debugging Increase the verbosity by changing the log level from its default value ERROR to the value INFO : cloudscale --debug server list or alternatively export CLOUDSCALE_DEBUG = 1 cloudscale server list To set the default log level e.g. to DEBUG use the CLOUDSCALE_LOG_LEVEL environment variable: export CLOUDSCALE_LOG_LEVEL = debug cloudscale server list","title":"Debugging"},{"location":"debug/#verbosity-and-debugging","text":"Increase the verbosity by changing the log level from its default value ERROR to the value INFO : cloudscale --debug server list or alternatively export CLOUDSCALE_DEBUG = 1 cloudscale server list To set the default log level e.g. to DEBUG use the CLOUDSCALE_LOG_LEVEL environment variable: export CLOUDSCALE_LOG_LEVEL = debug cloudscale server list","title":"Verbosity and Debugging"},{"location":"server/","text":"Server Usage Examples Create Servers Create one server: cloudscale server create \\ --name my-server \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" Create up to 10 servers in a row with --count : Tip When using --count , the option --name allows to use string format syntax with 2 special variables: counter : A number representing the current interation while creating multiple servers. uid : A random 8 char/number long string. This allows to create dynamic names, e.g.: Single number suffix: --name 'myserver-{counter}' Number with leading zero suffix: --name 'server-{counter:02d}' Random string suffix: --name 'server-{uid}' Combinations: --name 'server-{uid}-{counter:02d}.example.com' cloudscale server create \\ --name 'my-server-{uid}' \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" \\ --count 10 List Servers Get a list as table view: cloudscale server list Get a list as JSON response: cloudscale -o json server list Filter by Tag List servers having the tag project with value gemini: cloudscale server list --filter-tag project = gemini List servers having a tag project: cloudscale server list --filter-tag project Filter by JSON Query Get a list of stopped servers: cloudscale server list --filter-json '[?status == `stopped`]' Get a list of stopped servers having tag project=demo and start them after accepting: cloudscale server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Start a list of stopped servers after accepting having tag project=demo : cloudscale server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Delete a list of stopped servers after accepting having tag project=demo : cloudscale server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --delete ... Do you want to delete? [ y/N ] : Get a simplified custom JSON list of stopped servers in profile production : cloudscale \\ --output json \\ --profile production \\ server list \\ --filter-json '[?status == `stopped`].{\"server_name\": name, \"zone\": zone.slug, \"image\": image.slug, \"flavor\": flavor.slug}' [ { \"flavor\" : \"flex-8\" , \"image\" : \"rhel-7\" , \"server_name\" : \"server1\" , \"zone\" : \"rma1\" } , { \"flavor\" : \"flex-8\" , \"image\" : \"centos-7\" , \"server_name\" : \"server2\" , \"zone\" : \"rma1\" } ] Server Actions Stop a Server Stop a server: cloudscale server stop <uuid> Start a Server cloudscale server start <uuid> Delete a Server With prompt: cloudscale server delete <uuid> Just delete without questions asked: cloudscale server delete --force <uuid>","title":"Server Usages"},{"location":"server/#server-usage-examples","text":"","title":"Server Usage Examples"},{"location":"server/#create-servers","text":"Create one server: cloudscale server create \\ --name my-server \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" Create up to 10 servers in a row with --count : Tip When using --count , the option --name allows to use string format syntax with 2 special variables: counter : A number representing the current interation while creating multiple servers. uid : A random 8 char/number long string. This allows to create dynamic names, e.g.: Single number suffix: --name 'myserver-{counter}' Number with leading zero suffix: --name 'server-{counter:02d}' Random string suffix: --name 'server-{uid}' Combinations: --name 'server-{uid}-{counter:02d}.example.com' cloudscale server create \\ --name 'my-server-{uid}' \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" \\ --count 10","title":"Create Servers"},{"location":"server/#list-servers","text":"Get a list as table view: cloudscale server list Get a list as JSON response: cloudscale -o json server list","title":"List Servers"},{"location":"server/#filter-by-tag","text":"List servers having the tag project with value gemini: cloudscale server list --filter-tag project = gemini List servers having a tag project: cloudscale server list --filter-tag project","title":"Filter by Tag"},{"location":"server/#filter-by-json-query","text":"Get a list of stopped servers: cloudscale server list --filter-json '[?status == `stopped`]' Get a list of stopped servers having tag project=demo and start them after accepting: cloudscale server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Start a list of stopped servers after accepting having tag project=demo : cloudscale server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Delete a list of stopped servers after accepting having tag project=demo : cloudscale server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --delete ... Do you want to delete? [ y/N ] : Get a simplified custom JSON list of stopped servers in profile production : cloudscale \\ --output json \\ --profile production \\ server list \\ --filter-json '[?status == `stopped`].{\"server_name\": name, \"zone\": zone.slug, \"image\": image.slug, \"flavor\": flavor.slug}' [ { \"flavor\" : \"flex-8\" , \"image\" : \"rhel-7\" , \"server_name\" : \"server1\" , \"zone\" : \"rma1\" } , { \"flavor\" : \"flex-8\" , \"image\" : \"centos-7\" , \"server_name\" : \"server2\" , \"zone\" : \"rma1\" } ]","title":"Filter by JSON Query"},{"location":"server/#server-actions","text":"","title":"Server Actions"},{"location":"server/#stop-a-server","text":"Stop a server: cloudscale server stop <uuid>","title":"Stop a Server"},{"location":"server/#start-a-server","text":"cloudscale server start <uuid>","title":"Start a Server"},{"location":"server/#delete-a-server","text":"With prompt: cloudscale server delete <uuid> Just delete without questions asked: cloudscale server delete --force <uuid>","title":"Delete a Server"},{"location":"tags/","text":"Working with Tags Add/Update Tags Add/Update tags (but keep all existing with different keys): cloudscale <resource> update <uuid> --tag project = apollo --tag stage = prod Delete a single Tag Delete a tag (but keep all others existing): cloudscale <resource> update <uuid> --clear-tag status Add/Update and remove Tags at once Add/Update tags and remove a specific tag key: cloudscale <resource> update <uuid> \\ --tag project = apollo --tag stage = prod --clear-tag status Add/Update tags, remove other tags: cloudscale <resource> update <uuid> \\ --tag project = apollo --tag stage = prod --clear-all-tags","title":"Working with Tags"},{"location":"tags/#working-with-tags","text":"","title":"Working with Tags"},{"location":"tags/#addupdate-tags","text":"Add/Update tags (but keep all existing with different keys): cloudscale <resource> update <uuid> --tag project = apollo --tag stage = prod","title":"Add/Update Tags"},{"location":"tags/#delete-a-single-tag","text":"Delete a tag (but keep all others existing): cloudscale <resource> update <uuid> --clear-tag status","title":"Delete a single Tag"},{"location":"tags/#addupdate-and-remove-tags-at-once","text":"Add/Update tags and remove a specific tag key: cloudscale <resource> update <uuid> \\ --tag project = apollo --tag stage = prod --clear-tag status Add/Update tags, remove other tags: cloudscale <resource> update <uuid> \\ --tag project = apollo --tag stage = prod --clear-all-tags","title":"Add/Update and remove Tags at once"}]}